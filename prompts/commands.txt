I am building a communication module for an external device. I have well formed API code, but I need your help to write the code itself. For each external device command, there may be a "Command" command, a "Poll" command, an "Update" command, and a "Subscribe" command.

The "Command" command features a private method (a method prefixed with a double underscore) that is responsible for building the command string. Additionally, it also features a public method. The name of this method is the same as the private method except it does not contain underscores. Its sole responsibility is to call the __CallGenericCommand instance method.

The "Poll" command is similar to the "Command" command in that it contains two methods; one private and one public. The private method builds the poll string and the public method only calls the __GeneratePollFunction method.

Both of these commands have public methods that use the docstring that should be applied to the private method. I want the docstring to be on the public method because this, ultimately, the method that a user will use when interfacing with the API.

Lastly, there are the "Update" and "Subscribe" methods. The "Update" method is always private, and the "Subscribe" method is always public. The "Update" method parses the response string received from the device and notifies any listeners. The update method always uses the same format. It will always use the `find` method and use the match string contained in the `__matchTable` to retrieve the value. Additionally, it will always try to perform conversion on the values, then call the __NotifyListeners method and pass the values to the callback method. If for some reason the response provided to the method is nil or doesn't match one of the expected values, it should throw an error with the `error` method.

"Subscribe" will always be present whenever an "Update" method is present. It simply calls out the __SubscribeToGroup method. 

I want to give you a list of requirements for each of these command types, and I want to you to generate the code. For example, if I were to give you 

1. "RelayRecordCommand"
2. "relayRecordValue"
3. "relayRecordValue" can be "Off", "SD Card 1", "SD Card 2" or "USB" which converts to
   "OF", "S1", "S2", "US" respectively
4. The static part of the string is "rR"

1. "RelayRecordPoll"
2. This method accepts no arguments
3. The static part of the string is "?rR"

1. "RelayRecordUpdate"
2. "relayRecordResponse"
3. This response can be converted from "SD1", "SD2" or "Off" or "USB" to
   "SD Card 1", "SD Card 2", "Off" or "USB" respectively

Then the code that is generated should be

  ---
  -- Command Code for "RelayRecordCommand"
  --
  -- @param self The instance of the class or object invoking this method.
  -- @param relayRecordValue The desired relay record value. Should be one of the following:
  -- "Off", "SD Card 1", "SD Card 2", or "USB".
  --
  -- @return A command string that can be sent to toggle relay recording. The format of the command
  -- is: [startCharacter]rR[relayRecordToggleCode][cmdDelimiter].
  --
  -- @raise Error If `relayRecordValue` is not one of the valid toggle values.
  --
  __RelayRecordCommand = function(self, relayRecordValue)
    local cmdDelimiter = self.__cmdDelimiter
    local startCharacter = self.__startCharacter

    local relayRecordValueTable = {
      ["Off"] = "OF",
      ["SD Card 1"] = "S1",
      ["SD Card 2"] = "S2",
      ["USB"] = "US"
    }

    local staticPart = "rR"

    if relayRecordValueTable[relayRecordValue] == nil then
      local validValues = self:__ConcatTableKeys(relayRecordValueTable)
      local invalidValue = "`relayRecordValue` (" .. relayRecordValue .. ")"
      error(invalidValue .. " is not a valid value; should be " .. validValues)
    else
      local cmdString = startCharacter .. staticPart .. relayRecordValueTable[relayRecordValue] .. cmdDelimiter
      return cmdString
    end
  end,

  ---
  -- Generates a command for toggling relay recording.
  --
  -- @param self The instance of the class or object invoking this method.
  -- @param relayRecordValue The desired relay record value. Should be one of the following:
  -- "Off", "SD Card 1", "SD Card 2", or "USB".
  --
  RelayRecordCommand = function(self, relayRecordValue)
    self:__CallGenericCommand(
      "RelayRecord",
      "__RelayRecordCommand",
      relayRecordValue
    )
  end,

  ---
  -- Command Code for "RelayRecordPoll"
  --
  -- @param self The instance of the class or object invoking this method.
  --
  -- @return A command string for polling the relay record state.
  --
  __RelayRecordPoll = function(self)
    local cmdDelimiter = self.__cmdDelimiter
    local startCharacter = self.__startCharacter

    local staticPart = "?rR"

    local pollString = startCharacter .. staticPart .. cmdDelimiter

    return pollString
  end,

  ---
  -- Generates a command for polling the relay record state.
  --
  -- @param self The instance of the class or object invoking this method.
  --
  RelayRecordPoll = function(self)
    self:__GeneratePollFunction("RelayRecord")
  end,

  ---
  -- Private method for parsing and updating relay record response
  --
  -- @param self The instance of the class or object invoking this method.
  -- @param relayRecordResponse The response received from the communication module, containing
  -- information about the relay record state.
  --
  -- @return The updated relay record state value if not nil.
  --
  -- @raise Error If the response is invalid or missing required values.
  --
  __RelayRecordUpdate = function(self, relayRecordResponse)
    local relayRecordValueTable = {
      ["SD1"] = "SD Card 1",
      ["SD2"] = "SD Card 2",
      ["Off"] = "Off",
      ["USB"] = "USB"
    }

    local _, _, relayRecordMatch = string.find(relayRecordResponse, self.__matchTable["RelayRecordToggle"])

    if relayRecordMatch ~= nil then
      local convertedValue = relayRecordValueTable[relayRecordMatch]
      self:__NotifyListeners("RelayRecordToggle", convertedValue)
      return convertedValue
    else
      error("Error: `__RelayRecordUpdate` failed: No match found for " .. relayRecordResponse)
    end
  end,

  ---
  -- Subscribe command for relay record state.
  --
  -- This method subscribes to updates of the relay record state and registers a callback function
  -- to be called when the relay record state changes.
  --
  -- @param self The instance of the class or object invoking this method.
  -- @param callback A callback function to be called when the relay record state changes.
  --
  RelayRecordSubscribe = function(self, callback)
    self:__SubscribeToGroup("RelayRecordToggle", callback)
  end

If I were to give you

1. "SplitRecordingCommand"
2. This method accepts no arguments
3. The static part of the string is "23MT"

Then the generated code should be


  __SplitRecordingCommand = function(self)
    local cmdDelimiter = self.__cmdDelimiter
    local startCharacter = self.__startCharacter

    local staticPart = "23MT"

    local cmdString = startCharacter .. staticPart .. cmdDelimiter
    return cmdString
  end,

  ---
  -- Generates a command for splitting a recording.
  --
  -- This method constructs a command string for splitting the current recording.
  --
  -- @param self The instance of the class or object invoking this method.
  --
  -- @return A command string that can be sent to split the recording. The format of the command
  -- is: [startCharacter]23MT[cmdDelimiter].
  --
  SplitRecordingCommand = function(self)
    self:__CallGenericCommand(
      "SplitRecording",
      "__SplitRecordingCommand"
    )
  end,

Notice that, when no Poll or Update command specifications are provided, those commands are not generated.

Your task is to consume a list of specifications and generate the corresponding Lua code. I will give you a list of
specifications in the following message. The code you generate should be contained within a single code block. It should
be indented by two spaces, and the end of each method should be delineated by a comma. If you understand, tell me how the "Update" method is supposed to be structured, generally speaking.